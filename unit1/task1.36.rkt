#lang racket
;阻尼法
(define (abs x)
  (if (> x 0) x
      (- 0 x)))
(define tolerance 0.0001)
(define (fixed-point x)
  (define (fn x)
    (/ (log 1000) (log x)))
  (define (close-enough? v1 v2)
    (< (abs (- v1 v2)) tolerance))
  (define (try guess fn)
      (let ((better-value (fn guess )))
      (cond ((close-enough? guess better-value) better-value)
            (else (display guess) (newline) (try better-value fn))))
    )
  (try x fn))
(fixed-point 3)
(newline)
(newline)
(newline)
;平均阻尼法
(define (fixed-point-average x)
  (define (fn x)
    (/ (log 1000) (log x)))
  (define (close-enough? v1 v2)
    (< (abs (- v1 v2)) tolerance))
  (define (try guess fn)
      (let ((better-value (/ (+ (fn guess ) guess) 2)))
      (cond ((close-enough? guess better-value) better-value)
            (else (display guess) (newline) (try better-value fn))))
    )
  (try x fn))
(fixed-point-average 3)
