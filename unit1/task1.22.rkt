#lang racket
(define (square x)
  (* x x))
(define (smallest-divisor n)

  (find-divisor n 2))
(define (find-divisor n test-divisor)
  (cond ((> (square test-divisor) n) n)
        ((divides? test-divisor n) test-divisor)
        (else (find-divisor n (+ test-divisor 1)))))
(define (divides? a b)
  (= (remainder b a) 0))
;素数判断
(define (prime? n)
  (= n (smallest-divisor n)))
(define (finde_smallest n)
  (cond ((prime? n) n)
        (else (finde_smallest (+ n 1)))))
(define (show n)
  (newline)
  (define current (current-seconds))
  (display (finde_smallest n))
  (newline)
  (newline))
(show 1000)
(show 100000)
(show 10000000)
