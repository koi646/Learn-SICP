#lang racket
;定义序列累加
(define (accumulate op initial sequence)
  (if (null? sequence)
    initial
    (op (car sequence)
        (accumulate op initial (cdr sequence)))))
(define (accumulate-n op init seqs)
  (if (null? (car seqs))
      '()
      (cons (accumulate op init (map (lambda (x)
                                             (if (null? x)
                                               '()
                                               (car x)))
                                     seqs))
            (accumulate-n op init (map (lambda (x)
                                               (cdr x))
                                       seqs)))))
(define s (list (list 1 2 3) (list 4 5 6) (list 7 8 9) (list 10 11 12)))
(accumulate-n + 0 s)
